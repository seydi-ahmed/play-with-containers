version: "3.9"

services:
  inventory-db:
    image: inventory-database
    build:
      context: ./docker/inventory-db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    # image: postgres:15-alpine
    container_name: inventory-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_MOVIES}
    ports:
      - "5433:5432"
    volumes:
      - inventory-database:/var/lib/postgresql/data
    networks:
      - backend
    restart: always

  inventory-app:
    image: inventory-app
    build: ./srcs/inventory-app
    container_name: inventory-app
    ports:
      # - "${INVENTORY_PORT}:8080"
      - "8081:8080"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB_MOVIES: ${POSTGRES_DB_MOVIES}
      POSTGRES_HOST: inventory-db
      # INVENTORY_PORT: ${INVENTORY_PORT}
      INVENTORY_PORT: 8080
    depends_on:
      inventory-db:
        condition: service_healthy
    networks:
      - backend
    restart: always

  api-gateway:
    image: api-gateway-app
    extra_hosts:
      - "rabbitmq:172.17.0.1"   
    build: ./srcs/api-gateway
    container_name: api-gateway
    ports:
      - "${GATEWAY_PORT}:3000"
    environment:
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
      INVENTORY_API_URL: http://inventory-app
      INVENTORY_PORT: 8080
      # BILLING_API_URL: billing-app
      BILLING_API_URL: http://billing-app:7070
      GATEWAY_PORT: ${GATEWAY_PORT}
    volumes:
      - api-gateway-app:/usr/src/app/logs
    depends_on:
      - inventory-app
    networks:
      - backend
    restart: always

  billing-app:
    image: billing-app
    depends_on:
      rabbitmq:
        condition: service_healthy
      billing-db:
        condition: service_healthy
    build: ./srcs/billing-app
    container_name: billing-app
    ports:
      # - "${BILLING_PORT}:7070"
      - "8082:8080"
    environment:
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_HOST: rabbitmq
      BILLING_PORT: 8080
      POSTGRES_HOST: billing-db
    networks:
      - backend
    restart: always

  billing-db:
    image: billing-database
    build:
      context: ./docker/billing-db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    container_name: billing-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_ORDERS}
    ports:
      - "5434:5432"
    volumes:
      - billing-database:/var/lib/postgresql/data
    networks:
      - backend
    restart: always

  rabbitmq:
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 10
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: /
    networks:
      - backend
    restart: always

volumes:
  inventory-database:
  billing-database:
  api-gateway-app:

networks:
  backend:
    driver: bridge
